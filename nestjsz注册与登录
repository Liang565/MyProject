注册和登录：
1.在server后端项目中的admin子项目中创建模块 auth 处理用户登录和注册
nest g mo auth 选中要创建的目录下
nest g co auth 选中要创建的目录下
创建dto文件夹，加上登录和注册的dto
例如注册的dto
export class RegisterDto {
  @ApiProperty()
  username: string;
  @ApiProperty() //
  password: string;
}

2.编写接口，
注册接口：@Post("register")
         @ApiOperation({ summary: '注册' })
          async register(@Body dto:RegisterDto){
            const {username,password}=dto;//解构出dto中的参数
            const user = await this.userModel.create({//create一个user
            username: username,
            password: password,});
            return user;
          }
登录接口：
          //登录，这个是需要用本地用户名验证的策略
         @Post('login')
         @ApiOperation({ summary: '登录' })
         @UseGuards(AuthGuard('local')) //localStrategy的名字,守卫
         //@Body()  dto从客户端传上来的参数
         async login(@Body() dto: LoginDto, @Req() req) {
         // return req.user;
         return {
               //以用户的id作为主键生成token，使得每个用户的token是唯一的
               token: this.jwtService.sign(String(req.user._id)),
           };}
获取用户信息接口：
  //获取用户登录后的token，查看user的信息
  //必须需要用户登录后，获得了token，才可以使用这个接口
  //jwt登录策略
  @Get('user')
  @ApiOperation({ summary: '获取信息' })
  @UseGuards(AuthGuard('jwt')) //jwtStrategy的名字,守卫
  @ApiBearerAuth() //表示这个接口需要token才可以使用
  async user(@Req() req) {
    return req.user;
  }
3.用户密码需要散列，不能明文保存，需要在公共库中user.model.ts中，
  1）导入依赖 yarn add bcryptjs  yarn add -D @types/bcryptjs
  2)在user.model.ts中  
  @prop({
    select: false, //常规的数据库请求中不把password显示出来，除非手动选中
    get(val) {
      return val;
    },
    set(val) {
      //散列方法hashSync(散列的值，指数默认10，越大越慢)
      //往数据库里保存前，被hashSync处理散列，最后在return 传入数据库
      //val不为空，执行hashSync,未空，返回val
      return val ? hashSync(val) : val;
    },
  })
  password: string;
4.安装passport依赖包
yarn add @nestjs/passport passport passport-local passport-jwt
yarn add -D @types/passport @types/passport-jwt @types/passport-local //ts代码提示
5.本地在auth中创建 loacl.strategy.ts  local策略

6.在auth.model中
  imports: [PassportModule],
  providers: [LocalStrategy,JwtStrategy],
7.生成token 
需要引入jwt的包yarn add @nestjs/jwt
然后找一个全局的位置注册这个包，在libs下新建common,在其src的model下
@Global()//注意标记为全局,注意要在admin.modeule文件里面导入     CommonModule,
@Module({
  imports: [
    //这块
    JwtModule.registerAsync({
      useFactory() {
        return {
          secret: 'sifhgioaehgbb',
        };
      },
    }),
  ],
  providers: [CommonService],
  exports: [CommonService, JwtModule],
})
export class CommonModule {}


8.启用token
 1）main.ts的接口文档位置加入:.addBearerAuth(),启用token
 2）创建jwt策略
 3）在auth.module里面引用 providers: [LocalStrategy, JwtStrategy],
 4）在需要用的地方加上守卫， @UseGuards(AuthGuard('jwt')) //jwtStrategy的名字,守卫
 5）在需要使用token的接口加上   @ApiBearerAuth() //表示这个接口需要token才可以使用

